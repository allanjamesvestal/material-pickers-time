!function(t,i){"object"==typeof exports&&"object"==typeof module?module.exports=i():"function"==typeof define&&define.amd?define([],i):"object"==typeof exports?exports.TimePicker=i():t.TimePicker=i()}(this,function(){return function(t){function i(n){if(e[n])return e[n].exports;var l=e[n]={i:n,l:!1,exports:{}};return t[n].call(l.exports,l,l.exports,i),l.l=!0,l.exports}var e={};return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},i.p="",i(i.s=0)}([function(t,i,e){"use strict";var n=e(1),l=function(t){return t&&t.__esModule?t:{default:t}}(n);window.onload=function(){var t=new l.default;console.log("test"),t.bindInput("#bind-one"),t.bindInput("#bind-two",{timeFormat:"military"})}},function(t,i,e){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function l(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var s=function(){function t(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(i,e,n){return e&&t(i.prototype,e),n&&t(i,n),i}}(),c=e(2),a=n(c),o=e(3),d=n(o),r=e(4),u=n(r);e(5);var h=function(){function t(){return l(this,t),this.template=a.default,this.defaultOptions={timeFormat:"standard",autoNext:!1},this.cachedEls={},this.events=new u.default,this.setupTemplate(),this.cachedEls.body=document.body,this.cachedEls.overlay=this.cachedEls.body.getElementsByClassName("mtp-overlay")[0],this.cachedEls.wrapper=this.cachedEls.overlay.getElementsByClassName("mtp-wrapper")[0],this.cachedEls.picker=this.cachedEls.wrapper.getElementsByClassName("mtp-picker")[0],this.cachedEls.meridiem=this.cachedEls.wrapper.getElementsByClassName("mtp-meridiem")[0],this.cachedEls.meridiemSpans=this.cachedEls.meridiem.getElementsByTagName("span"),this.cachedEls.displayHours=this.cachedEls.wrapper.getElementsByClassName("mtp-display__hours")[0],this.cachedEls.displayMinutes=this.cachedEls.wrapper.getElementsByClassName("mtp-display__minutes")[0],this.cachedEls.displayMeridiem=this.cachedEls.wrapper.getElementsByClassName("mtp-display__meridiem")[0],this.cachedEls.buttonCancel=this.cachedEls.picker.getElementsByClassName("mtp-actions__cancel")[0],this.cachedEls.buttonBack=this.cachedEls.picker.getElementsByClassName("mtp-actions__back")[0],this.cachedEls.buttonNext=this.cachedEls.picker.getElementsByClassName("mtp-actions__next")[0],this.cachedEls.buttonFinish=this.cachedEls.picker.getElementsByClassName("mtp-actions__finish")[0],this.cachedEls.clockHours=this.cachedEls.picker.getElementsByClassName("mtp-clock__hours")[0],this.cachedEls.clockMinutes=this.cachedEls.picker.getElementsByClassName("mtp-clock__minutes")[0],this.cachedEls.clockMilitaryHours=this.cachedEls.picker.getElementsByClassName("mtp-clock__hours-military")[0],this.cachedEls.clockHand=this.cachedEls.picker.getElementsByClassName("mtp-clock__hand")[0],this.cachedEls.clockHoursLi=this.cachedEls.clockHours.getElementsByTagName("li"),this.cachedEls.clockMinutesLi=this.cachedEls.clockMinutes.getElementsByTagName("li"),this.cachedEls.clockMilitaryHoursLi=this.cachedEls.clockMilitaryHours.getElementsByTagName("li"),this.setEvents(),this}return s(t,[{key:"bindInput",value:function(t){var i=this,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t instanceof HTMLElement?t:document.querySelector(t);n.mtpOptions=(0,d.default)({},this.defaultOptions,e),n.addEventListener("focus",function(t){return i.showEvent(t)})}},{key:"openOnInput",value:function(t){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.inputEl=t instanceof HTMLElement?t:document.querySelector(t),this.inputEl.mtpOptions=(0,d.default)({},this.defaultOptions,i),this.show()}},{key:"setupTemplate",value:function(){this.isTemplateInDOM()||document.body.insertAdjacentHTML("beforeend",a.default)}},{key:"setEvents",value:function(){var t=this;this.hasSetEvents()||(this.cachedEls.overlay.addEventListener("click",function(i){return t.hideEvent(i)}),this.cachedEls.buttonCancel.addEventListener("click",function(i){return t.hideEvent(i)}),this.cachedEls.buttonNext.addEventListener("click",function(){return t.showMinutes()}),this.cachedEls.buttonBack.addEventListener("click",function(){return t.showHours()}),this.cachedEls.buttonFinish.addEventListener("click",function(){return t.finish()}),[].forEach.call(this.cachedEls.meridiemSpans,function(i){i.addEventListener("click",function(i){return t.meridiemSelectEvent(i)})}),[].forEach.call(this.cachedEls.clockHoursLi,function(i){i.addEventListener("click",function(i){t.hourSelectEvent(i,t.cachedEls.clockHours,t.cachedEls.clockHoursLi)})}),[].forEach.call(this.cachedEls.clockMilitaryHoursLi,function(i){i.addEventListener("click",function(i){t.hourSelectEvent(i,t.cachedEls.clockMilitaryHours,t.cachedEls.clockMilitaryHoursLi)})}),[].forEach.call(this.cachedEls.clockMinutesLi,function(i){i.addEventListener("click",function(i){t.minuteSelectEvent(i,t.cachedEls.clockMinutes,t.cachedEls.clockMinutesLi)})}),this.cachedEls.wrapper.classList.add("mtp-events-set"))}},{key:"show",value:function(){var t=this.isMilitaryFormat();this.inputEl.blur(),this.toggleHoursVisible(!0,t),this.toggleMinutesVisible(),this.setDisplayTime({hours:t?"00":"12",minutes:"0"}),this.cachedEls.body.style.overflow="hidden",this.cachedEls.displayMeridiem.style.display=t?"none":"inline",this.cachedEls.meridiem.style.display=t?"none":"block",this.cachedEls.overlay.style.display="block",this.cachedEls.clockHand.style.height=t?"90px":"105px",this.events.trigger("show")}},{key:"showEvent",value:function(t){this.inputEl=t.target,this.show()}},{key:"hide",value:function(){this.cachedEls.overlay.style.display="none",this.cachedEls.body.style.overflow="",this.inputEl.dispatchEvent(new Event("blur")),this.resetState(),this.events.trigger("hide")}},{key:"hideEvent",value:function(t){t.stopPropagation();var i=["mtp-overlay","mtp-actions__cancel"],e=t.target.classList;i.some(function(t){return e.contains(t)})&&this.hide()}},{key:"resetState",value:function(){this.currentStep=0,this.toggleHoursVisible(!0,this.isMilitaryFormat()),this.toggleMinutesVisible(),this.cachedEls.clockHoursLi[0].dispatchEvent(new Event("click")),this.cachedEls.clockMinutesLi[0].dispatchEvent(new Event("click")),this.cachedEls.clockMilitaryHoursLi[0].dispatchEvent(new Event("click")),this.cachedEls.meridiemSpans[0].dispatchEvent(new Event("click"))}},{key:"setDisplayTime",value:function(t){var i=t.hours,e=t.minutes;if(i&&(this.cachedEls.displayHours.innerHTML=i.trim()),e){var n=e<10?"0"+e:e;this.cachedEls.displayMinutes.innerHTML=n.trim()}}},{key:"rotateHand",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:9,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:30,e=t*i-180,n="rotate("+e+"deg)";this.cachedEls.clockHand.style.transform=n,this.cachedEls.clockHand.style["-webkit-transform"]=n,this.cachedEls.clockHand.style["-ms-transform"]=n}},{key:"showHours",value:function(){var t=this.isMilitaryFormat(),i=t?this.cachedEls.clockMilitaryHoursLi:this.cachedEls.clockHoursLi;this.toggleHoursVisible(!0,t),this.toggleMinutesVisible(),this.rotateHand(this.getActiveIndex(i))}},{key:"showMinutes",value:function(){var t=this.cachedEls.clockMinutesLi;this.toggleHoursVisible(),this.toggleMinutesVisible(!0),this.rotateHand(this.getActiveIndex(t),6),this.cachedEls.clockHand.style.height="115px"}},{key:"finish",value:function(){this.timeSelected(),this.hide()}},{key:"toggleHoursVisible",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],i=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.cachedEls.clockHours.style.display=t&&!i?"block":"none",this.cachedEls.clockMilitaryHours.style.display=t&&i?"block":"none",this.cachedEls.buttonNext.style.display=t?"none":"inline-block"}},{key:"toggleMinutesVisible",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.cachedEls.clockMinutes.style.display=t?"block":"none",this.cachedEls.buttonBack.style.display=t?"inline-block":"none",this.cachedEls.buttonNext.style.display=t?"none":"inline-block",this.cachedEls.buttonFinish.style.display=t?"inline-block":"none"}},{key:"getActiveIndex",value:function(t){var i=0;return[].some.call(t,function(t,e){return!!t.classList.contains("mtp-clock--active")&&(i=e,!0)}),i}},{key:"timeSelected",value:function(){var t=this.cachedEls.displayHours.innerHTML,i=this.cachedEls.displayMinutes.innerHTML,e=this.isMilitaryFormat()?"":this.cachedEls.displayMeridiem.innerHTML,n=t+":"+i+" "+e;this.inputEl.value=n.trim(),this.inputEl.dispatchEvent(new Event("input"))}},{key:"setActiveEl",value:function(t,i){t.getElementsByClassName("mtp-clock--active")[0].classList.remove("mtp-clock--active"),i.classList.add("mtp-clock--active")}},{key:"meridiemSelectEvent",value:function(t){var i=t.target,e=this.cachedEls.meridiem.getElementsByClassName("mtp-clock--active")[0],n=i.innerHTML;e.isEqualNode(i)||(e.classList.remove("mtp-clock--active"),i.classList.add("mtp-clock--active"),this.cachedEls.displayMeridiem.innerHTML=n)}},{key:"hourSelectEvent",value:function(t,i,e){t.stopPropagation();var n=t.target,l=n.parentElement,s=l.classList.contains("mtp-clock__hours--inner");this.cachedEls.clockHand.style.height=s?"90px":"105px",this.setActiveEl(i,n);var c=this.getActiveIndex(e);this.setDisplayTime({hours:n.innerHTML}),this.rotateHand(c),this.events.trigger("hourSelected")}},{key:"minuteSelectEvent",value:function(t,i,e){t.stopPropagation();var n=t.target;this.setActiveEl(i,n);var l=this.getActiveIndex(e),s=l;this.setDisplayTime({minutes:s}),this.rotateHand(l,6),this.events.trigger("minuteSelected")}},{key:"isMilitaryFormat",value:function(){return Boolean("military"===this.inputEl.mtpOptions.timeFormat)}},{key:"hasSetEvents",value:function(){return this.cachedEls.wrapper.classList.contains("mtp-events-set")}},{key:"isTemplateInDOM",value:function(){return Boolean(document.getElementsByClassName("mtp-overlay")[0])}}]),t}();i.default=h},function(t,i,e){"use strict";Object.defineProperty(i,"__esModule",{value:!0});i.default='\n<div class="mtp-overlay" style="display:none">\n    <div class="mtp-wrapper">\n        <div class="mtp-display">\n            <span class="mtp-display__hours">12</span>:\n            <span class="mtp-display__minutes">00</span>\n            <span class="mtp-display__meridiem">am</span>\n        </div>\x3c!-- END .mtp-display --\x3e\n        <div class="mtp-picker">\n            <div class="mtp-meridiem">\n                <span class="mtp-clock--active">am</span>\n                <span>pm</span>\n            </div>\x3c!-- END .mtp-meridiem --\x3e\n            <div class="mtp-clock">\n                <div class="mtp-clock__center"></div>\n                <div class="mtp-clock__hand"></div>\n                <ul class="mtp-clock__time mtp-clock__outer mtp-clock__hours" style="display:none">\n                    <li class="mtp-clock--active">12</li>\n                    <li>1</li>\n                    <li>2</li>\n                    <li>3</li>\n                    <li>4</li>\n                    <li>5</li>\n                    <li>6</li>\n                    <li>7</li>\n                    <li>8</li>\n                    <li>9</li>\n                    <li>10</li>\n                    <li>11</li>\n                </ul>\n                <ul class="mtp-clock__time mtp-clock__outer mtp-clock__minutes" style="display:none">\n                    <li class="mtp-clock--active">0</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>5</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>10</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>15</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>20</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>25</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>30</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>35</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>40</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>45</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>50</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>55</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                    <li>&middot;</li>\n                </ul>\n                <ul class="mtp-clock__time mtp-clock__hours-military" style="display:none">\n                    <div class="mtp-clock__hours--inner">\n                        <li class="mtp-clock--active">00</li>\n                        <li>13</li>\n                        <li>14</li>\n                        <li>15</li>\n                        <li>16</li>\n                        <li>17</li>\n                        <li>18</li>\n                        <li>19</li>\n                        <li>20</li>\n                        <li>21</li>\n                        <li>22</li>\n                        <li>23</li>\n                    </div>\n                    <div class="mtp-clock__hours">\n                        <li>12</li>\n                        <li>1</li>\n                        <li>2</li>\n                        <li>3</li>\n                        <li>4</li>\n                        <li>5</li>\n                        <li>6</li>\n                        <li>7</li>\n                        <li>8</li>\n                        <li>9</li>\n                        <li>10</li>\n                        <li>11</li>\n                    </div>\n                </ul>\n            </div>\x3c!-- END .mtp-clock --\x3e\n            <div class="mtp-actions">\n                <button type="button" class="mtp-actions__button mtp-actions__cancel">Cancel</button>\n                <button type="button" class="mtp-actions__button mtp-actions__back" style="display:none">Back</button>\n                <button type="button" class="mtp-actions__button mtp-actions__next">Next</button>\n                <button type="button" class="mtp-actions__button mtp-actions__finish" style="display:none">Done</button>\n            </div>\x3c!-- END .mtp-actions --\x3e\n        </div>\x3c!-- END .mtp-picker --\x3e\n    </div>\x3c!-- END .mtp-wrapper --\x3e\n</div>\x3c!-- END .mtp-overlay --\x3e\n'},function(t,i,e){"use strict";function n(t){if("undefined"===t||null===t)throw new TypeError("Cannot convert first argument to object");for(var i=Object(t),e=0;e<(arguments.length<=1?0:arguments.length-1);e+=1){var n=arguments.length<=e+1?void 0:arguments[e+1];if("undefined"!==n&&null!==n){n=Object(n);for(var l=Object.keys(n),s=0,c=l.length;s<c;s+=1){var a=l[s],o=Object.getOwnPropertyDescriptor(n,a);"undefined"!==o&&o.enumerable&&(i[a]=n[a])}}}return i}Object.defineProperty(i,"__esModule",{value:!0}),i.default=n},function(t,i,e){"use strict";function n(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var l=function(){function t(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(i,e,n){return e&&t(i.prototype,e),n&&t(i,n),i}}(),s=function(){function t(){n(this,t),this.events={}}return l(t,[{key:"on",value:function(t,i){this.events[t]||(this.events[t]=[]),this.events[t].push(i)}},{key:"off",value:function(t){this.events[t]&&(this.events[t]=[])}},{key:"trigger",value:function(t,i){this.events[t]&&this.events[t].length&&this.events[t].forEach(function(t){return t(i)})}}]),t}();i.default=s},function(t,i){}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,